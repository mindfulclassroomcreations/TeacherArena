import * as XLSX from 'xlsx'

interface ExportData {
  subjects?: Array<{ name: string; description: string }>
  frameworks?: Array<{ name: string; description: string }>
  grades?: Array<{ name: string; description: string }>
  strands?: Array<{
    strand_code: string
    strand_name: string
    num_standards: number
    key_topics: string[]
    target_lesson_count: number
    performance_expectations: string[]
  }>
  lessons?: Array<{
    id?: string
    name?: string
    title?: string
    description: string
  }>
  metadata?: {
    subject?: string
    framework?: string
    grade?: string
    generatedAt: string
  }
}

export const exportToExcel = (data: ExportData, fileName: string = 'export.xlsx') => {
  const workbook = XLSX.utils.book_new()

  // Export Subjects Sheet
  if (data.subjects && data.subjects.length > 0) {
    const subjectsData = data.subjects.map((subject, index) => ({
      'No.': index + 1,
      'Subject Name': subject.name,
      'Description': subject.description,
    }))
    const subjectsSheet = XLSX.utils.json_to_sheet(subjectsData)
    subjectsSheet['!cols'] = [
      { wch: 5 },
      { wch: 25 },
      { wch: 50 }
    ]
    XLSX.utils.book_append_sheet(workbook, subjectsSheet, 'Subjects')
  }

  // Export Frameworks Sheet
  if (data.frameworks && data.frameworks.length > 0) {
    const frameworksData = data.frameworks.map((framework, index) => ({
      'No.': index + 1,
      'Framework Name': framework.name,
      'Description': framework.description,
    }))
    const frameworksSheet = XLSX.utils.json_to_sheet(frameworksData)
    frameworksSheet['!cols'] = [
      { wch: 5 },
      { wch: 25 },
      { wch: 50 }
    ]
    XLSX.utils.book_append_sheet(workbook, frameworksSheet, 'Frameworks')
  }

  // Export Grades Sheet
  if (data.grades && data.grades.length > 0) {
    const gradesData = data.grades.map((grade, index) => ({
      'No.': index + 1,
      'Grade Level': grade.name,
      'Description': grade.description,
    }))
    const gradesSheet = XLSX.utils.json_to_sheet(gradesData)
    gradesSheet['!cols'] = [
      { wch: 5 },
      { wch: 25 },
      { wch: 50 }
    ]
    XLSX.utils.book_append_sheet(workbook, gradesSheet, 'Grades')
  }

  // Export Strands Sheet
  if (data.strands && data.strands.length > 0) {
    const strandsData = data.strands.map((strand, index) => ({
      'No.': index + 1,
      'Strand Code': strand.strand_code,
      'Strand Name': strand.strand_name,
      'Key Topics': Array.isArray(strand.key_topics) ? strand.key_topics.join('; ') : '',
      'Number of Standards': strand.num_standards,
      'Target Lessons': strand.target_lesson_count,
      'Performance Expectations': Array.isArray(strand.performance_expectations) 
        ? strand.performance_expectations.join('; ') 
        : '',
    }))
    const strandsSheet = XLSX.utils.json_to_sheet(strandsData)
    strandsSheet['!cols'] = [
      { wch: 5 },
      { wch: 15 },
      { wch: 25 },
      { wch: 40 },
      { wch: 15 },
      { wch: 15 },
      { wch: 50 }
    ]
    XLSX.utils.book_append_sheet(workbook, strandsSheet, 'Strands')
  }

  // Export Lessons Sheet
  if (data.lessons && data.lessons.length > 0) {
    const lessonsData = data.lessons.map((lesson, index) => ({
      'No.': index + 1,
      'Lesson Title': lesson.title || lesson.name || '',
      'Description': lesson.description,
    }))
    const lessonsSheet = XLSX.utils.json_to_sheet(lessonsData)
    lessonsSheet['!cols'] = [
      { wch: 5 },
      { wch: 30 },
      { wch: 60 }
    ]
    XLSX.utils.book_append_sheet(workbook, lessonsSheet, 'Lessons')
  }

  // Export Metadata Sheet
  if (data.metadata) {
    const metadataData = [
      { 'Field': 'Subject', 'Value': data.metadata.subject || 'N/A' },
      { 'Field': 'Framework', 'Value': data.metadata.framework || 'N/A' },
      { 'Field': 'Grade Level', 'Value': data.metadata.grade || 'N/A' },
      { 'Field': 'Generated At', 'Value': data.metadata.generatedAt },
      { 'Field': 'Generated By', 'Value': 'Teacher Arena Lesson Generator' },
    ]
    const metadataSheet = XLSX.utils.json_to_sheet(metadataData)
    metadataSheet['!cols'] = [
      { wch: 20 },
      { wch: 40 }
    ]
    XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Info')
  }

  // Write the file
  XLSX.writeFile(workbook, fileName)
}

export const downloadLessonsAsExcel = (
  lessons: Array<{ name?: string; title?: string; description: string }>,
  subject?: string,
  framework?: string,
  grade?: string
) => {
  const timestamp = new Date().toLocaleString('en-US', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  }).replace(/[\/\s:]/g, '-')

  const fileName = `lessons-${timestamp}.xlsx`

  exportToExcel(
    {
      lessons,
      metadata: {
        subject,
        framework,
        grade,
        generatedAt: new Date().toLocaleString(),
      },
    },
    fileName
  )
}

export const downloadCompleteCurriculumAsExcel = (
  subjects: Array<{ name: string; description: string }>,
  frameworks: Array<{ name: string; description: string }>,
  grades: Array<{ name: string; description: string }>,
  strands: Array<{
    strand_code: string
    strand_name: string
    num_standards: number
    key_topics: string[]
    target_lesson_count: number
    performance_expectations: string[]
  }>,
  lessons: Array<{ name?: string; title?: string; description: string }>,
  subject?: string,
  framework?: string,
  grade?: string
) => {
  const timestamp = new Date().toLocaleString('en-US', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  }).replace(/[\/\s:]/g, '-')

  const fileName = `curriculum-${timestamp}.xlsx`

  exportToExcel(
    {
      subjects,
      frameworks,
      grades,
      strands,
      lessons,
      metadata: {
        subject,
        framework,
        grade,
        generatedAt: new Date().toLocaleString(),
      },
    },
    fileName
  )
}
